// Package hvacunits provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package hvacunits

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for HVACAttributesFanSpeed.
const (
	HVACAttributesFanSpeedAuto HVACAttributesFanSpeed = "Auto"
	HVACAttributesFanSpeedHigh HVACAttributesFanSpeed = "High"
	HVACAttributesFanSpeedLow  HVACAttributesFanSpeed = "Low"
	HVACAttributesFanSpeedMid  HVACAttributesFanSpeed = "Mid"
)

// Defines values for HVACAttributesMode.
const (
	HVACAttributesModeAuto HVACAttributesMode = "Auto"
	HVACAttributesModeCool HVACAttributesMode = "Cool"
	HVACAttributesModeDry  HVACAttributesMode = "Dry"
	HVACAttributesModeFan  HVACAttributesMode = "Fan"
	HVACAttributesModeHeat HVACAttributesMode = "Heat"
)

// Defines values for HVACAttributesPower.
const (
	HVACAttributesPowerOff HVACAttributesPower = "Off"
	HVACAttributesPowerOn  HVACAttributesPower = "On"
)

// Defines values for HVACAttributesSwing.
const (
	HVACAttributesSwingOff HVACAttributesSwing = "Off"
	HVACAttributesSwingOn  HVACAttributesSwing = "On"
)

// Defines values for HVACConstraintsTemperatureScale.
const (
	C HVACConstraintsTemperatureScale = "C"
	F HVACConstraintsTemperatureScale = "F"
)

// Codeset defines model for Codeset.
type Codeset struct {
	Capabilities *string `json:"capabilities,omitempty"`
	CodesetId    string  `json:"codeset-id"`
	Id           int     `json:"id"`
	Rank         *int    `json:"rank,omitempty"`
}

// CollectionMeta defines model for CollectionMeta.
type CollectionMeta struct {
	First string  `json:"first"`
	Last  string  `json:"last"`
	Next  *string `json:"next"`
	Prev  *string `json:"prev"`
	Self  string  `json:"self"`
}

// HVACAttributes defines model for HVACAttributes.
type HVACAttributes struct {
	ButtonPresses           *[]string               `json:"button-presses,omitempty"`
	Capabilities            *string                 `json:"capabilities,omitempty"`
	CodesetId               *string                 `json:"codeset-id,omitempty"`
	Codesets                *[]Codeset              `json:"codesets,omitempty"`
	Constraints             *HVACConstraints        `json:"constraints,omitempty"`
	DefaultFanSpeed         *string                 `json:"default-fan-speed,omitempty"`
	FanSpeed                *HVACAttributesFanSpeed `json:"fan-speed,omitempty"`
	Incremental             *bool                   `json:"incremental,omitempty"`
	IrDeviceModelId         *string                 `json:"ir-device-model-id"`
	MakeId                  *string                 `json:"make-id,omitempty"`
	MakeName                *string                 `json:"make-name,omitempty"`
	Mode                    *HVACAttributesMode     `json:"mode,omitempty"`
	ModelId                 *string                 `json:"model-id,omitempty"`
	Name                    *string                 `json:"name,omitempty"`
	Power                   *HVACAttributesPower    `json:"power,omitempty"`
	QuietHoursEnd           *string                 `json:"quiet-hours-end"`
	QuietHoursStart         *string                 `json:"quiet-hours-start"`
	Swing                   *HVACAttributesSwing    `json:"swing,omitempty"`
	SwingAuto               *bool                   `json:"swing-auto,omitempty"`
	Temperature             *float32                `json:"temperature,omitempty"`
	TemperatureCompensation *string                 `json:"temperature-compensation,omitempty"`
	ToDownload              *bool                   `json:"to-download,omitempty"`
	Type                    *string                 `json:"type,omitempty"`
}

// HVACAttributesFanSpeed defines model for HVACAttributes.FanSpeed.
type HVACAttributesFanSpeed string

// HVACAttributesMode defines model for HVACAttributes.Mode.
type HVACAttributesMode string

// HVACAttributesPower defines model for HVACAttributes.Power.
type HVACAttributesPower string

// HVACAttributesSwing defines model for HVACAttributes.Swing.
type HVACAttributesSwing string

// HVACCollectionResponse defines model for HVACCollectionResponse.
type HVACCollectionResponse struct {
	Data []HVACUnit     `json:"data"`
	Meta CollectionMeta `json:"meta"`
}

// HVACConstraints defines model for HVACConstraints.
type HVACConstraints struct {
	OFF              *map[string]map[string]map[string]map[string][]string `json:"OFF,omitempty"`
	ON               *map[string]map[string]map[string]map[string][]string `json:"ON,omitempty"`
	TemperatureScale *HVACConstraintsTemperatureScale                      `json:"temperature-scale,omitempty"`
}

// HVACConstraintsTemperatureScale defines model for HVACConstraints.TemperatureScale.
type HVACConstraintsTemperatureScale string

// HVACRelationships defines model for HVACRelationships.
type HVACRelationships struct {
	CurrentState   *Relationship `json:"current-state,omitempty"`
	HvacUnitStates *LinkOnly     `json:"hvac-unit-states,omitempty"`
	Make           *LinkOnly     `json:"make,omitempty"`
	Puck           *Relationship `json:"puck,omitempty"`
	Room           *Relationship `json:"room,omitempty"`
	Structure      *Relationship `json:"structure,omitempty"`
	Zone           *Relationship `json:"zone,omitempty"`
}

// HVACSingleResponse defines model for HVACSingleResponse.
type HVACSingleResponse struct {
	Data HVACUnit   `json:"data"`
	Meta SingleMeta `json:"meta"`
}

// HVACUnit defines model for HVACUnit.
type HVACUnit struct {
	Attributes    HVACAttributes    `json:"attributes"`
	Id            string            `json:"id"`
	Relationships HVACRelationships `json:"relationships"`
	Type          string            `json:"type"`
}

// LinkOnly defines model for LinkOnly.
type LinkOnly struct {
	Links Links `json:"links"`
}

// Links defines model for Links.
type Links struct {
	Related *string `json:"related,omitempty"`
	Self    *string `json:"self,omitempty"`
}

// RelationData defines model for RelationData.
type RelationData struct {
	Id   string `json:"id"`
	Type string `json:"type"`
}

// Relationship defines model for Relationship.
type Relationship struct {
	Data  *RelationData `json:"data,omitempty"`
	Links Links         `json:"links"`
}

// SingleMeta defines model for SingleMeta.
type SingleMeta struct {
	Self string `json:"self"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiHvacUnits request
	GetApiHvacUnits(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiHvacUnitsId request
	GetApiHvacUnitsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiHvacUnitsId request
	PatchApiHvacUnitsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiHvacUnits(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiHvacUnitsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiHvacUnitsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiHvacUnitsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiHvacUnitsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiHvacUnitsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiHvacUnitsRequest generates requests for GetApiHvacUnits
func NewGetApiHvacUnitsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/hvac-units")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiHvacUnitsIdRequest generates requests for GetApiHvacUnitsId
func NewGetApiHvacUnitsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/hvac-units/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiHvacUnitsIdRequest generates requests for PatchApiHvacUnitsId
func NewPatchApiHvacUnitsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/hvac-units/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiHvacUnitsWithResponse request
	GetApiHvacUnitsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiHvacUnitsResponse, error)

	// GetApiHvacUnitsIdWithResponse request
	GetApiHvacUnitsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetApiHvacUnitsIdResponse, error)

	// PatchApiHvacUnitsIdWithResponse request
	PatchApiHvacUnitsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PatchApiHvacUnitsIdResponse, error)
}

type GetApiHvacUnitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HVACCollectionResponse
}

// Status returns HTTPResponse.Status
func (r GetApiHvacUnitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiHvacUnitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiHvacUnitsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HVACSingleResponse
}

// Status returns HTTPResponse.Status
func (r GetApiHvacUnitsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiHvacUnitsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiHvacUnitsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HVACSingleResponse
}

// Status returns HTTPResponse.Status
func (r PatchApiHvacUnitsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiHvacUnitsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiHvacUnitsWithResponse request returning *GetApiHvacUnitsResponse
func (c *ClientWithResponses) GetApiHvacUnitsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiHvacUnitsResponse, error) {
	rsp, err := c.GetApiHvacUnits(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiHvacUnitsResponse(rsp)
}

// GetApiHvacUnitsIdWithResponse request returning *GetApiHvacUnitsIdResponse
func (c *ClientWithResponses) GetApiHvacUnitsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetApiHvacUnitsIdResponse, error) {
	rsp, err := c.GetApiHvacUnitsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiHvacUnitsIdResponse(rsp)
}

// PatchApiHvacUnitsIdWithResponse request returning *PatchApiHvacUnitsIdResponse
func (c *ClientWithResponses) PatchApiHvacUnitsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PatchApiHvacUnitsIdResponse, error) {
	rsp, err := c.PatchApiHvacUnitsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiHvacUnitsIdResponse(rsp)
}

// ParseGetApiHvacUnitsResponse parses an HTTP response from a GetApiHvacUnitsWithResponse call
func ParseGetApiHvacUnitsResponse(rsp *http.Response) (*GetApiHvacUnitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiHvacUnitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HVACCollectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiHvacUnitsIdResponse parses an HTTP response from a GetApiHvacUnitsIdWithResponse call
func ParseGetApiHvacUnitsIdResponse(rsp *http.Response) (*GetApiHvacUnitsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiHvacUnitsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HVACSingleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchApiHvacUnitsIdResponse parses an HTTP response from a PatchApiHvacUnitsIdWithResponse call
func ParsePatchApiHvacUnitsIdResponse(rsp *http.Response) (*PatchApiHvacUnitsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiHvacUnitsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HVACSingleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
