// Package pucks provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package pucks

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Defines values for PuckAttributesOrientation.
const (
	Standing PuckAttributesOrientation = "standing"
)

// Defines values for PuckAttributesPuckDisplayColor.
const (
	Black PuckAttributesPuckDisplayColor = "black"
	White PuckAttributesPuckDisplayColor = "white"
)

// CollectionMeta defines model for CollectionMeta.
type CollectionMeta struct {
	First string  `json:"first"`
	Last  string  `json:"last"`
	Next  *string `json:"next"`
	Prev  *string `json:"prev"`
	Self  string  `json:"self"`
}

// LinkOnly defines model for LinkOnly.
type LinkOnly struct {
	Links Links `json:"links"`
}

// Links defines model for Links.
type Links struct {
	Related *string `json:"related,omitempty"`
	Self    *string `json:"self,omitempty"`
}

// Puck defines model for Puck.
type Puck struct {
	Attributes    PuckAttributes    `json:"attributes"`
	Id            string            `json:"id"`
	Relationships PuckRelationships `json:"relationships"`
	Type          string            `json:"type"`
}

// PuckAttributes defines model for PuckAttributes.
type PuckAttributes struct {
	BeaconIntervalMs           *int                            `json:"beacon-interval-ms,omitempty"`
	BluetoothTxPowerMw         *int                            `json:"bluetooth-tx-power-mw,omitempty"`
	CreatedAt                  *time.Time                      `json:"created-at,omitempty"`
	CurrentHumidity            *int                            `json:"current-humidity,omitempty"`
	CurrentRssi                *int                            `json:"current-rssi,omitempty"`
	CurrentTemperatureC        *float32                        `json:"current-temperature-c,omitempty"`
	DemoMode                   *int                            `json:"demo-mode,omitempty"`
	DisplayNumber              *string                         `json:"display-number,omitempty"`
	DropRate                   *float32                        `json:"drop-rate,omitempty"`
	HumidityOffset             *float32                        `json:"humidity-offset"`
	Inactive                   *bool                           `json:"inactive,omitempty"`
	IrDownload                 *bool                           `json:"ir-download,omitempty"`
	IrSetupEnabled             *bool                           `json:"ir-setup-enabled"`
	IsGateway                  *bool                           `json:"is-gateway,omitempty"`
	Name                       *string                         `json:"name,omitempty"`
	OauthAppAssignedAt         *time.Time                      `json:"oauth-app-assigned-at"`
	Orientation                *PuckAttributesOrientation      `json:"orientation,omitempty"`
	PuckDisplayColor           *PuckAttributesPuckDisplayColor `json:"puck-display-color,omitempty"`
	ReportingIntervalDs        *int                            `json:"reporting-interval-ds,omitempty"`
	SubGhzRadioTxPowerMw       *int                            `json:"sub-ghz-radio-tx-power-mw"`
	TemperatureOffsetC         *float32                        `json:"temperature-offset-c"`
	TemperatureOffsetOverrideC *float32                        `json:"temperature-offset-override-c"`
	UpdatedAt                  *time.Time                      `json:"updated-at,omitempty"`
}

// PuckAttributesOrientation defines model for PuckAttributes.Orientation.
type PuckAttributesOrientation string

// PuckAttributesPuckDisplayColor defines model for PuckAttributes.PuckDisplayColor.
type PuckAttributesPuckDisplayColor string

// PuckReading defines model for PuckReading.
type PuckReading struct {
	Attributes    PuckReadingAttributes    `json:"attributes"`
	Id            *string                  `json:"id,omitempty"`
	Relationships PuckReadingRelationships `json:"relationships"`
	Type          string                   `json:"type"`
}

// PuckReadingAttributes defines model for PuckReadingAttributes.
type PuckReadingAttributes struct {
	ButtonPushes        *int       `json:"button-pushes,omitempty"`
	CreatedAt           *time.Time `json:"created-at,omitempty"`
	CurrentOffset       *int       `json:"current-offset,omitempty"`
	DesiredTemperatureC *float32   `json:"desired-temperature-c,omitempty"`
	DieTemperature      *int       `json:"die-temperature,omitempty"`
	FirmwareVersionB    *int       `json:"firmware-version-b,omitempty"`
	FirmwareVersionS    *int       `json:"firmware-version-s,omitempty"`
	FirmwareVersionW    *int       `json:"firmware-version-w,omitempty"`
	Humidity            *int       `json:"humidity,omitempty"`
	IsGateway           *bool      `json:"is-gateway,omitempty"`
	Light               *int       `json:"light,omitempty"`
	MessageVersion      *int       `json:"message-version,omitempty"`
	RoomPressure        *float32   `json:"room-pressure,omitempty"`
	RoomTemperatureC    *float32   `json:"room-temperature-c,omitempty"`
	RotaryEncodedClicks *int       `json:"rotary-encoded-clicks,omitempty"`
	Rssi                *int       `json:"rssi,omitempty"`
	SystemVoltage       *float32   `json:"system-voltage,omitempty"`
	Temperature         *int       `json:"temperature,omitempty"`
}

// PuckReadingRelationships defines model for PuckReadingRelationships.
type PuckReadingRelationships struct {
	Puck Relationship `json:"puck"`
}

// PuckReadingResponse defines model for PuckReadingResponse.
type PuckReadingResponse struct {
	Data PuckReading `json:"data"`
	Meta struct {
		Self *string `json:"self,omitempty"`
	} `json:"meta"`
}

// PuckRelationships defines model for PuckRelationships.
type PuckRelationships struct {
	BeaconSightings LinkOnly     `json:"beacon-sightings"`
	ClosestVents    LinkOnly     `json:"closest-vents"`
	CurrentState    LinkOnly     `json:"current-state"`
	HardwareVersion Relationship `json:"hardware-version"`
	PuckStates      LinkOnly     `json:"puck-states"`
	Room            Relationship `json:"room"`
	SensorReadings  LinkOnly     `json:"sensor-readings"`
	Structure       Relationship `json:"structure"`
}

// PucksResponse defines model for PucksResponse.
type PucksResponse struct {
	Data []Puck         `json:"data"`
	Meta CollectionMeta `json:"meta"`
}

// RelationData defines model for RelationData.
type RelationData struct {
	Id   string `json:"id"`
	Type string `json:"type"`
}

// Relationship defines model for Relationship.
type Relationship struct {
	Data  RelationData `json:"data"`
	Links Links        `json:"links"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiPucks request
	GetApiPucks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPucksIdCurrentReading request
	GetApiPucksIdCurrentReading(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiPucks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPucksRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPucksIdCurrentReading(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPucksIdCurrentReadingRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiPucksRequest generates requests for GetApiPucks
func NewGetApiPucksRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pucks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPucksIdCurrentReadingRequest generates requests for GetApiPucksIdCurrentReading
func NewGetApiPucksIdCurrentReadingRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pucks/%s/current-reading", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiPucksWithResponse request
	GetApiPucksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiPucksResponse, error)

	// GetApiPucksIdCurrentReadingWithResponse request
	GetApiPucksIdCurrentReadingWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetApiPucksIdCurrentReadingResponse, error)
}

type GetApiPucksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PucksResponse
}

// Status returns HTTPResponse.Status
func (r GetApiPucksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPucksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPucksIdCurrentReadingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PuckReadingResponse
}

// Status returns HTTPResponse.Status
func (r GetApiPucksIdCurrentReadingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPucksIdCurrentReadingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiPucksWithResponse request returning *GetApiPucksResponse
func (c *ClientWithResponses) GetApiPucksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiPucksResponse, error) {
	rsp, err := c.GetApiPucks(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPucksResponse(rsp)
}

// GetApiPucksIdCurrentReadingWithResponse request returning *GetApiPucksIdCurrentReadingResponse
func (c *ClientWithResponses) GetApiPucksIdCurrentReadingWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetApiPucksIdCurrentReadingResponse, error) {
	rsp, err := c.GetApiPucksIdCurrentReading(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPucksIdCurrentReadingResponse(rsp)
}

// ParseGetApiPucksResponse parses an HTTP response from a GetApiPucksWithResponse call
func ParseGetApiPucksResponse(rsp *http.Response) (*GetApiPucksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPucksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PucksResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiPucksIdCurrentReadingResponse parses an HTTP response from a GetApiPucksIdCurrentReadingWithResponse call
func ParseGetApiPucksIdCurrentReadingResponse(rsp *http.Response) (*GetApiPucksIdCurrentReadingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPucksIdCurrentReadingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PuckReadingResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
